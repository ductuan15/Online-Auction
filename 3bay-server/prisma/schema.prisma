generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id              Int        @id @unique(map: "id_UNIQUE") @default(autoincrement())
  title           String     @unique(map: "categories_title_uindex") @default("") @db.VarChar(255)
  parentId        Int?       @map("parent_id")
  createdAt       DateTime?  @default(now()) @map("created_at") @db.DateTime(0)
  categories      Category?  @relation("categoriesTocategories_parent_id", fields: [parentId], references: [id], map: "categories_fk0")
  otherCategories Category[] @relation("categoriesTocategories_parent_id")
  products        Product[]  @relation("categoriesToproducts")

  @@index([parentId], map: "fk_category_category_idx")
  @@map("categories")
}

model Auction {
  id                                          Int             @id @default(autoincrement())
  startTime                                   DateTime        @default(now()) @db.DateTime(0)
  closeTime                                   DateTime        @default(now()) @db.DateTime(0)
  openPrice                                   Decimal         @db.Decimal(19, 4)
  incrementPrice                              Decimal         @db.Decimal(19, 4)
  buyoutPrice                                 Decimal?        @db.Decimal(19, 4)
  productId                                   Int
  winningBidId                                Int?
  autoExtendAuctionTiming                     Boolean
  currentPrice                                Decimal         @default(0.0000) @db.Decimal(19, 4)
  sellerComment                               String?         @db.VarChar(255)
  sellerReview                                Boolean?
  bidderComment                               String?         @db.VarChar(255)
  bidderReview                                Boolean?
  product                                     Product         @relation("auctionsToproducts", fields: [productId], references: [id], onUpdate: Restrict, map: "auctions_fk0")
  winningBid                                  Bid?            @relation("auctions_winningBidIdTobids", fields: [winningBidId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "auctions_fk1")
  autoBids                                    autoBid[]       @relation("auctionsToauto_bid")
  bids                                        Bid[]           @relation("auctionsTobids_auctionId")
  products_auctionsToproducts_latestAuctionId Product?        @relation("auctionsToproducts_latestAuctionId")
  userBidStatus                               UserBidStatus[] @relation("auctionsTouser_bid_status")

  @@index([productId], map: "auctions_fk0")
  @@index([winningBidId], map: "auctions_fk1")
  @@map("auctions")
}

model Bid {
  id             Int       @id @default(autoincrement())
  bidPrice       Decimal   @default(0.0000) @db.Decimal(19, 4)
  bidTime        DateTime  @default(now()) @db.DateTime(0)
  bidderId       String    @db.VarChar(255)
  auctionId      Int
  auction        Auction   @relation("auctionsTobids_auctionId", fields: [auctionId], references: [id], onUpdate: Restrict, map: "bids_fk1")
  bidder         User      @relation("bidsTousers", fields: [bidderId], references: [uuid], onUpdate: Restrict, map: "bids_fk0")
  winningAuction Auction[] @relation("auctions_winningBidIdTobids")

  @@index([bidderId], map: "bids_fk0")
  @@index([auctionId], map: "bids_fk1")
  @@map("bids")
}

model ProductDescriptionHistory {
  id          Int      @id @default(autoincrement())
  description String   @db.Text
  productId   Int
  createdAt   DateTime @default(now()) @db.DateTime(0)
  products    Product  @relation("product_des_historyToproducts", fields: [productId], references: [id], onDelete: Cascade, map: "product_des_history_fk0")

  @@index([productId], map: "product_des_history_fk0")
  @@map("product_des_history")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  img       String  @db.Text
  products  Product @relation("product_imagesToproducts", fields: [productId], references: [id], onUpdate: Restrict, map: "product_images_fk0")

  @@index([productId], map: "product_images_fk0")
  @@map("product_images")
}

model Product {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(255)
  categoryId                Int
  sellerId                  String                      @db.VarChar(255)
  createdAt                 DateTime                    @default(now()) @db.DateTime(0)
  deletedAt                 DateTime?                   @db.DateTime(0)
  latestAuctionId           Int?                        @unique(map: "latestAuctionId_UNIQUE")
  category                  Category                    @relation("categoriesToproducts", fields: [categoryId], references: [id], map: "products_fk0")
  latestAuction             Auction?                    @relation("auctionsToproducts_latestAuctionId", fields: [latestAuctionId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "products_fk2")
  seller                    User                        @relation("productsTousers", fields: [sellerId], references: [uuid], map: "products_fk1")
  auctions                  Auction[]                   @relation("auctionsToproducts")
  notifications             Notifications[]             @relation("notificationsToproducts")
  productDescriptionHistory ProductDescriptionHistory[] @relation("product_des_historyToproducts")
  productImages             ProductImage[]              @relation("product_imagesToproducts")
  userWatchlist             UserWatchlist[]             @relation("productsTouser_watchlist")

  @@index([categoryId], map: "products_fk0")
  @@index([sellerId], map: "products_fk1")
  @@fulltext([name], map: "name")
  @@map("products")
}

model UpgradeToSellerRequest {
  userId String @id @db.VarChar(255)
  user   User   @relation("upgrade_to_seller_requestsTousers", fields: [userId], references: [uuid], map: "upgrade_to_seller_requests_fk0")

  @@map("upgrade_to_seller_requests")
}

model UserWatchlist {
  userId    String  @db.VarChar(255)
  productId Int
  products  Product @relation("productsTouser_watchlist", fields: [productId], references: [id], onUpdate: Restrict, map: "user_watchlist_fk1")
  user      User    @relation("user_watchlistTousers", fields: [userId], references: [uuid], map: "user_watchlist_fk0")

  @@id([userId, productId])
  @@index([userId], map: "user_watchlist_fk0")
  @@index([productId], map: "user_watchlist_fk1")
  @@map("user_watchlist")
}

model User {
  uuid                   String                  @id @default(uuid()) @db.VarChar(255)
  name                   String                  @db.VarChar(255)
  email                  String                  @unique(map: "email") @db.VarChar(255)
  isDisabled             Boolean                 @default(false)
  role                   Role                    @default(BIDDER)
  pwd                    String                  @db.VarChar(255)
  dob                    DateTime?               @db.DateTime(0)
  verified               Boolean                 @default(false)
  profile                String?                 @db.VarChar(255)
  refreshToken           String                  @default(uuid()) @db.VarChar(512)
  address                String?                 @db.VarChar(255)
  autoBids               autoBid[]               @relation("auto_bidTousers")
  bids                   Bid[]                   @relation("bidsTousers")
  notifications          Notifications[]         @relation("notificationsTousers")
  products               Product[]               @relation("productsTousers")
  upgradeToSellerRequest UpgradeToSellerRequest? @relation("upgrade_to_seller_requestsTousers")
  userBidStatus          UserBidStatus[]         @relation("user_bid_statusTousers")
  userWatchlist          UserWatchlist[]         @relation("user_watchlistTousers")

  @@fulltext([name], map: "name")
  @@map("users")
}

model otp {
  id         String   @default(uuid()) @db.VarChar(255)
  type       OtpType  @default(VERIFY)
  otp        String   @db.VarChar(255)
  expiryTime DateTime @db.DateTime(0)
  data       String?  @db.VarChar(255)

  @@id([id, type])
}

model UserBidStatus {
  auctionId Int
  userId    String    @db.VarChar(255)
  status    BidStatus
  auction   Auction   @relation("auctionsTouser_bid_status", fields: [auctionId], references: [id], onUpdate: Restrict, map: "user_bid_status_fk0")
  user      User      @relation("user_bid_statusTousers", fields: [userId], references: [uuid], onUpdate: Restrict, map: "user_bid_status_fk1")

  @@id([auctionId, userId])
  @@index([userId], map: "user_bid_status_fk1")
  @@map("user_bid_status")
}

model autoBid {
  auctionId    Int
  userId       String  @db.VarChar(255)
  maximumPrice Decimal @db.Decimal(19, 4)
  auctions     Auction @relation("auctionsToauto_bid", fields: [auctionId], references: [id], onUpdate: Restrict, map: "auto_bid_fk0")
  user         User    @relation("auto_bidTousers", fields: [userId], references: [uuid], onUpdate: Restrict, map: "auto_bid_fk1")
  createdTime  DateTime? @default(now()) @db.DateTime(0)

  @@id([auctionId, userId])
  @@index([userId], map: "auto_bid_fk1")
  @@map("auto_bid")
}

model Notifications {
  id        Int              @id @default(autoincrement())
  uuid      String           @db.VarChar(255)
  type      NotificationType
  productId Int
  date      DateTime         @default(now()) @db.DateTime(0)
  data      Product          @relation("notificationsToproducts", fields: [productId], references: [id], onDelete: Cascade, map: "notifications_products_id_fk")
  user      User             @relation("notificationsTousers", fields: [uuid], references: [uuid], onDelete: Cascade, map: "notifications_users_uuid_fk")

  @@index([productId], map: "notifications_products_id_fk")
  @@index([uuid], map: "notifications_users_uuid_fk")
  @@map("notifications")
}

enum Role {
  BIDDER
  SELLER
  ADMINISTRATOR

  @@map("users_role")
}

enum OtpType {
  VERIFY
  CHANGE_PWD
  CHANGE_EMAIL

  @@map("otp_type")
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  AUCTION_NEW_BID
  AUCTION_BID_REJECTED
  AUCTION_CLOSED_NO_WINNER
  AUCTION_CLOSED_HAD_WINNER

  @@map("notifications_type")
}
